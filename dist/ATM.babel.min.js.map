{"version":3,"sources":["ATM.js"],"names":["validateData","rule","data","options","ATM_CONFIG","VALIDATE_RULES","_typeof","requiredData","requiredOptions","some","val","console","warn","processData","arguments","length","undefined","PROCESS_RULES","Object","prototype","toString","call","forEach","mergeOptionValue","mergeDataName","mergeOptionName","reportData","REPORT_RULES","ATM","piwik_emit","test","baidu_auto","google_auto","piwik_auto","default_auto","default_emit","log","piwikTT","setInterval","Piwik","atmTracker","getTracker","value","trackEvent","category","action","name","error","clearInterval","autoCollectTrackData","validateRule","processRule","reportRule","page","window","location","href","toLowerCase","currenturl","indexOf","jQuery","_nodeList","document","querySelectorAll","element","_elements","Array","slice","_element","addEventListener","trigger","this","emitCollectingTrackData","$","on","_processedData","setOptions"],"mappings":"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","file":"ATM.babel.min.js","sourcesContent":["//---------------------------------------------------------------------\r\n//\r\n// Auto Track Module\r\n// \r\n// v0.0.2\r\n// URL: [url=https://github.com/xunge0613/ATM/]https://github.com/xunge0613/ATM[/url]\r\n//\r\n// Licensed under the MIT license:\r\n//        [url=http://www.opensource.org/licenses/mit-license.php]http://www.opensource.org/licenses/mit-license.php[/url]\r\n//\r\n//---------------------------------------------------------------------\r\n;(function () {\r\n\tconst ATM = {}\r\n \r\n\t// CONFIG\r\n\t// -----------------------------------------------\r\n\tconst ATM_CONFIG = {\r\n\t\t/*\r\n            数据校验         \r\n        */\r\n\t\t'VALIDATE_RULES': {\r\n\t\t\t'piwik_emit': function(data,options) {\r\n\t\t\t\treturn true\r\n\t\t\t},\r\n\t\t\t'test': {\r\n\t\t\t\trequiredData: ['test'], \r\n            \trequiredOptions: []\r\n\t\t\t},\r\n\t\t\t'baidu_auto': {\r\n\t\t\t\trequiredData: [], \r\n            \trequiredOptions: ['trigger','page', 'element']\r\n\t\t\t},\r\n\t\t\t'google_auto': {\r\n\t\t\t\trequiredData: [], \r\n            \trequiredOptions: ['trigger','page', 'element']\r\n\t\t\t},\r\n            'piwik_auto': {\r\n            \trequiredData: [], \r\n            \trequiredOptions: ['trigger','page', 'element']\r\n            },\r\n            'default_auto': {\r\n            \trequiredData: [], \r\n            \trequiredOptions: ['trigger','page', 'element']\r\n            },\r\n            'default_emit': {\r\n            \trequiredData: [], \r\n            \trequiredOptions: []\r\n            },\r\n        },\r\n        /*\r\n\t\t\t数据处理\r\n        */\r\n        'PROCESS_RULES': {\r\n\t\t\t'piwik_emit': function(data,options) {\r\n\t\t\t\treturn data\r\n\t\t\t},\r\n\t\t\t'piwik_auto': [\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'category',\r\n\t\t\t\t\tmergeOptionName: 'page'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'action',\r\n\t\t\t\t\tmergeOptionName: 'trigger'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'name',\r\n\t\t\t\t\tmergeOptionName: 'element'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'value',\r\n\t\t\t\t\tmergeOptionValue: 1\r\n\t\t\t\t},\t\t\t\t\t\t\t\t\r\n\t\t\t],\r\n\t\t\t'default_auto': [\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'category',\r\n\t\t\t\t\tmergeOptionName: 'page'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'action',\r\n\t\t\t\t\tmergeOptionName: 'trigger'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'name',\r\n\t\t\t\t\tmergeOptionName: 'element'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'value',\r\n\t\t\t\t\tmergeOptionValue: 1\r\n\t\t\t\t},\t\t\t\t\t\t\t\t\r\n\t\t\t],\r\n\t\t\t'default_emit': [],\r\n\t\t},\r\n        /*\r\n\t\t\t数据上报\r\n        */\r\n        'REPORT_RULES': {\t\t\t\r\n            'default_emit': function(data, options) { \r\n\t            console.log(\"ATM report default_emit\",data)                 \r\n                return ;\r\n\t\t\t},\r\n            'default_auto': function(data, options) { \r\n\t            console.log(\"ATM report default_auto\",data)\r\n                 //Piwik延时执行\r\n                let piwikTT = setInterval(function () {\r\n                    if (!(typeof Piwik === 'undefined')) {\r\n                        try {\r\n                            let atmTracker = Piwik.getTracker();\r\n                            if (data.value) {\r\n                                atmTracker.trackEvent(data.category, data.action, data.name, data.value);\r\n                            }\r\n                            else {\r\n                                atmTracker.trackEvent(data.category, data.action, data.name);\r\n                            }\r\n                        }\r\n                        catch (error) {\r\n                            //do nothing\r\n                            console.log(\"piwik 尚未加载\");\r\n                        } finally {\r\n                            clearInterval(piwikTT);\r\n                        }\r\n                    }\r\n                }, 200);\r\n                return ;\r\n\t\t\t},\r\n        }, \r\n\t \r\n\t}\r\n\r\n\t// RULES\r\n\r\n \r\n\t// METHODS \r\n\t// -----------------------------------------------\r\n\r\n\t// 数据校验\r\n\tfunction validateData(rule, data, options) {\r\n\t\tlet _validateStatus = true \r\n\r\n\t\tif(!ATM_CONFIG.VALIDATE_RULES[rule]) {\r\n\t\t\t// 指定规则，若未找到rule, 认定校验失败\t\t \r\n\t\t\tconsole.warn(\"ATM validateData: no matched validate rule, Please check your VALIDATE_RULES\")\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\tif(typeof ATM_CONFIG.VALIDATE_RULES[rule] === 'function') {\r\n\t\t\t// 规则为函数，直接用该函数进行判断\r\n\t\t\treturn ATM_CONFIG.VALIDATE_RULES[rule](data,options)\r\n\r\n\t\t} else if (typeof ATM_CONFIG.VALIDATE_RULES[rule] === 'object') {\r\n\t\t\t// 规则为对象，使用约定方式进行判断\t\t\t\r\n\t\t\tATM_CONFIG.VALIDATE_RULES[rule].requiredData = ATM_CONFIG.VALIDATE_RULES[rule].requiredData || []\r\n\t\t\tATM_CONFIG.VALIDATE_RULES[rule].requiredOptions = ATM_CONFIG.VALIDATE_RULES[rule].requiredOptions || []\r\n\t\t\t// 任何一个未匹配成功即报错 \r\n\t\t\treturn !ATM_CONFIG.VALIDATE_RULES[rule].requiredData.some(function(val) {\t\t \r\n\t\t\t\t!data[val] && console.warn(\"ATM validateData: Validate NOT passed, param: data.\" + val)\t\t\t\t\t\t\r\n\t\t\t\treturn !data[val] \r\n\t\t\t}) && !ATM_CONFIG.VALIDATE_RULES[rule].requiredOptions.some(function(val) {\t\t\t\t\r\n\t\t\t\t!options[val] && console.warn(\"ATM validateData: Validate NOT passed, param: options.\" + val)\r\n\t\t\t\treturn !options[val] \r\n\t\t\t})  \r\n\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\tconsole.warn(\"ATM validateData: Type unmatched Please check your ATM_CONFIG.VALIDATE_RULES \")\r\n\t\treturn false\r\n\t}\r\n\r\n\t// 数据预处理\r\n\tfunction processData(rule = '', data = {} , options = {}) { \r\n\t\tif(!ATM_CONFIG.PROCESS_RULES[rule]) {\r\n\t\t\t// 指定规则，若未找到rule, 认定处理失败\t\t \r\n\t\t\tconsole.warn(\"ATM validateData: no matched validate rule, Please check your PROCESS_RULES\")\r\n\t\t\treturn false\r\n\t\t}\t\r\n\r\n\t\tif(typeof ATM_CONFIG.PROCESS_RULES[rule] === 'function') {\r\n\t\t\t// 规则为函数，直接用该函数进行数据处理\r\n\t\t\treturn ATM_CONFIG.PROCESS_RULES[rule](data,options)\r\n\r\n\t\t} else if (Object.prototype.toString.call(ATM_CONFIG.PROCESS_RULES[rule]) === '[object Array]') {\r\n\t\t\t// 规则为数组，使用约定方式进行数据处理\t\t\t\t\t\t\t\t \t\r\n\t\t\t// mergeOptionName 优先级高于 mergeOptionValue\r\n\t\t\tATM_CONFIG.PROCESS_RULES[rule].forEach(function(rule) {\t\t\t\t\r\n\t\t\t\tif(typeof rule.mergeOptionValue !== 'undefined') {\r\n\t\t\t\t\tdata[rule.mergeDataName] = options[rule.mergeOptionValue]\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof rule.mergeOptionName !== 'undefined') {\r\n\t\t\t\t\tdata[rule.mergeDataName] = options[rule.mergeOptionName]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\treturn data \r\n\t\t}\t\r\n\t\t\r\n\t}\r\n\r\n\t// 数据上报\r\n\tfunction reportData(rule = '', data = {}, options = {}) {\t\t\t\t\r\n\t\tif(!ATM_CONFIG.REPORT_RULES[rule]) {\r\n\t\t\t// 指定规则，若未找到rule, 认定上报失败\t\t \t \r\n\t\t\tconsole.warn(\"ATM validateData: no matched validate rule, Please check your REPORT_RULES\")\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn ATM_CONFIG.REPORT_RULES[rule](data,options)\t\t \r\n\t}\r\n\r\n\t// API\r\n\t// -----------------------------------------------\r\n\r\n\t/*\r\n        被动方式 - 代理绑定埋点事件，收集埋点数据，并自动进行数据上报\r\n        @param: data // 需要自定义记录的数据\r\n        data: {\r\n            page: '', // 页面名称: home/index， 默认是 options.page\r\n            trigger: '', // 事件名or操作名 ，默认是 options.element + options.trigger\r\n            element: '', // 触发事件的元素名,默认是 options.element\r\n            value: Number, // 统计计数，默认是1\r\n        }\r\n\r\n        @param: options // required\r\n        options: {\r\n            trigger: 'eventName', // required, 触发事件名\r\n            action: '', // 一次性上报or分步骤上报\r\n            page: '', // required, 页面url,大小写不敏感，*表示全部页面\r\n            element: '#id .class tag', // required, 触发事件的元素   \r\n            eventType: 'capture', // 默认 capture 捕获 ，如果使用冒泡方式，则默认绑定在document上\r\n            validateRule: '', // 验证规则\r\n            processRule: '', // 处理规则\r\n            reportRule: '', // 上报规则\r\n\r\n        }\r\n    */\r\n\tATM.autoCollectTrackData = function (data = {}, options = {}) {\r\n\t  \r\n\t    // 数据校验，处理，上报都可空，默认使用 default_auto 进行检验\r\n\t    options.validateRule = options.validateRule || 'default_auto'\r\n\t    options.processRule = options.processRule || 'default_auto'\r\n\t    options.reportRule = options.reportRule || 'default_auto'\r\n\r\n\t    if(!validateData(options.validateRule, data, options)) {\r\n\t    \tconsole.warn(\"ATM autoCollectTrackData: validateRule NOT passed\")\r\n\t    \treturn false\r\n\t    }\r\n\r\n\t   \t// page === * 表示全部页面都监听\r\n\t    if (options.page === \"*\") {\r\n\t        options.page = window.location.href.toLowerCase();\r\n\t    }\r\n\r\n\t    var currenturl = window.location.href.toLowerCase();\r\n\t    try {\r\n\t        if (currenturl.indexOf(options.page) != -1) {\r\n\t        \tif(typeof jQuery === 'undefined') {\r\n\t\t        \t// default : Event Capture 默认捕获方式\r\n\t\t        \tlet _nodeList = document.querySelectorAll(options.element)\r\n\r\n\t\t        \tif(_nodeList) {\r\n\t\t        \t\tlet _elements = Array.prototype.slice.call(_nodeList)\r\n\t\t        \t\t_elements.forEach(function(_element) {\r\n\t\t        \t\t\t_element.addEventListener(options.trigger,function() {\t\t\t        \t\t \t\r\n\t\t\t        \t\t \tconsole.log(this)\r\n\t\t\t        \t\t \tconsole.log('ATM.emitCollectingTrackData(data,options), native, Event Capture')\r\n\t\t\t        \t\t \tATM.emitCollectingTrackData(data,options)\r\n\t\t\t        \t\t })\r\n\t\t        \t\t})\r\n\t\t        \t\t \r\n\t\t        \t}\r\n\t\t        \t// 如果异步加载，则使用事件冒泡委托代理\r\n\t        \t} else {\r\n\t        \t\t// 如果存在jQuery，可以解决兼容性问题\r\n\t\t            $(options.element).on(options.trigger, data, function () {\r\n\t\t                console.log(this)\r\n\t        \t\t \tconsole.log('ATM.emitCollectingTrackData(data,options) ,jQuery ,Event Capture')\r\n\t        \t\t \tATM.emitCollectingTrackData(data,options)\r\n\t\t            })\r\n\t        \t}\t        \t\t        \t\r\n\t        }                \r\n\t    }\r\n\t    catch (error) {\r\n\t         console.log(error)\r\n\t    }\r\n\t    \r\n\t}\r\n\r\n\t/*\r\n            主动 触发数据收集\r\n            @param: data {\r\n                page: '', // 页面: home/index， 默认是 options.page\r\n                trigger: '', // 事件名or操作名 ，默认是 options.element + options.trigger\r\n                element: '', // 触发事件的元素名,默认是 options.element\r\n                value: Number, // 统计计数，默认是1\r\n            }\r\n            @param: options {    \r\n                processType: function() {} // 数据处理方式\r\n            }\r\n            data 和 options 不能同时为空，单一可空\r\n            data 为空时，可能是通过 被动方式 autoCollectingTrackData\r\n            options 为空时， 一般是 直接调用主动方式 emitCollectingTrackData\r\n        */\r\n    ATM.emitCollectingTrackData = function (data, options) {\r\n        if (!data && !options) {\r\n            return false;\r\n        }\r\n        // options 为空时，认定为通过主动收集调用，填充默认 processRule, validateRule, reportRule\r\n        options = options || { \r\n        \tprocessRule: 'default_emit',\r\n        \tvalidateRule: 'default_emit',\r\n        \treportRule: 'default_emit'\r\n        }\r\n\r\n        // 默认使用default_emit校验数据\r\n        if (!options.validateRule) {\r\n            options.validateRule = 'default_emit'\r\n        } \r\n\r\n        // 默认使用default_emit处理数据\r\n        if (!options.processRule) {\r\n            options.processRule = 'default_emit'\r\n        } \r\n\r\n        // 默认使用default_emit上报\r\n        if (!options.reportRule) {\r\n            options.reportRule = 'default_emit'\r\n        }\r\n\r\n        console.log('emitCollectingTrackData', data, options)   \r\n\r\n        // 验证数据         \r\n        if(!validateData(options.validateRule, data, options)) {\r\n        \treturn false\r\n        }\r\n       \r\n        \r\n\r\n        // 上报数据\r\n        // 如果有多个 reportRule\r\n        // 约定使用reportRule作为processRule\r\n\t \r\n        if(typeof options.reportRule === 'string') {\r\n        \t// 处理单条数据          \r\n\t        // 若返回 false 表示数据处理失败\r\n\t        data = processData(options.processRule, data, options)\r\n\t        if(data) {\r\n\t        \treportData(options.reportRule, data, options)  \r\n\t        }\t\t \r\n\t\t} else if (Object.prototype.toString.call(options.reportRule) === '[object Array]') {\r\n\t\t\toptions.reportRule.forEach(function(rule) {\r\n\r\n\t\t\t\t// 处理数据          \r\n\t\t        // 若返回 false 表示数据处理失败\r\n\t\t        let _processedData = processData(options.processRule, data, options)\t\t      \r\n\t\t        if(_processedData) {\r\n\t\t        \treportData(rule, _processedData, options)  \r\n\t\t        }\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t}                      \r\n    }\r\n\r\n\r\n\t// TBD\r\n\tATM.setOptions = function(options) {\r\n\t\tconsole.log(\"setOptions:\")\r\n\t\tconsole.log(\"options: \" + options)\r\n\t\tconsole.log(\"ATM_CONFIG: \" + ATM_CONFIG)\t \r\n\t}\r\n\r\n\r\n\r\n\t// exports\r\n\t// -----------------------------------------------\r\n\r\n\t// 暴露全局 ATM\r\n\t// 如果已存在 ATM ， 为了避免覆盖原有业务中ATM，禁用该插件\r\n\t// this.ATM = ATM; babel 转换默认使用 use strict ， 立即执行函数中 this 指向 undefind\r\n\tif(window.ATM) {\r\n\t\tconsole.warn(\"ATM Fatal Error: window.ATM already exists, Please check\")\r\n\t}\r\n\twindow.ATM = window.ATM || ATM\r\n\r\n})();\r\n"]}