{"version":3,"sources":["ATM.js"],"names":["_initATMTracker","trackerName","data","options","ATM","atmTracker","ATMTracker","_applyATMTracker","emit","ATM_CONFIG","VALIDATE_RULES","piwik_emit","test","requiredData","requiredOptions","default_auto","default_emit","PROCESS_RULES","piwik_auto","mergeDataName","mergeOptionName","mergeOptionValue","REPORT_RULES","console","log","piwikTT","setInterval","Piwik","getTracker","value","trackEvent","page","trigger","element","error","clearInterval","presetRules","validateRule","processRule","reportRule","google_auto","_classCallCheck","this","_createClass","key","_typeof","some","val","warn","Object","prototype","toString","call","forEach","rule","validateData","_processedData","processData","reportData","autoCollectTrackData","arguments","length","undefined","desc","pageRegexp","RegExp","currenturl","window","location","href","toLowerCase","match","jQuery","_nodeList","document","querySelectorAll","_elements","Array","slice","_element","addEventListener","emitCollectingTrackData","$","on","_trackerName","setOptions"],"mappings":"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","file":"ATM.babel.min.js","sourcesContent":["//---------------------------------------------------------------------\r\n//\r\n// Auto Track Module\r\n// \r\n// v0.0.4\r\n// URL: [url=https://github.com/xunge0613/ATM/]https://github.com/xunge0613/ATM[/url]\r\n//\r\n// Licensed under the MIT license:\r\n//        [url=http://www.opensource.org/licenses/mit-license.php]http://www.opensource.org/licenses/mit-license.php[/url]\r\n//\r\n//---------------------------------------------------------------------\r\n;(function () {\r\n\r\n\t// 默认配置 CONFIG\r\n\t// -----------------------------------------------\r\n\tconst ATM_CONFIG = {\r\n\t\t/*\r\n            数据校验         \r\n        */\r\n\t\t'VALIDATE_RULES': {\r\n\t\t\t'piwik_emit': function(data,options) {\r\n\t\t\t\treturn true\r\n\t\t\t},\r\n\t\t\t'test': {\r\n\t\t\t\trequiredData: ['test'], \r\n            \trequiredOptions: []\r\n\t\t\t},\t\t\r\n\t\t\t'default_auto': {\r\n            \trequiredData: [], \r\n            \trequiredOptions: []\r\n            },\r\n            'default_emit': {\r\n            \trequiredData: [], \r\n            \trequiredOptions: ['trigger']\r\n            },\r\n        },\r\n        /*\r\n\t\t\t数据处理\r\n        */\r\n        'PROCESS_RULES': {\r\n\t\t\t'piwik_emit': function(data,options) {\r\n\t\t\t\treturn data\r\n\t\t\t},\r\n\t\t\t'piwik_auto': [\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'category',\r\n\t\t\t\t\tmergeOptionName: 'page'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'action',\r\n\t\t\t\t\tmergeOptionName: 'trigger'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'name',\r\n\t\t\t\t\tmergeOptionName: 'element'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'value',\r\n\t\t\t\t\tmergeOptionValue: 1\r\n\t\t\t\t},\t\t\t\t\t\t\t\t\r\n\t\t\t],\r\n\t\t\t'default_auto': function(data,options) {\r\n\t\t\t\treturn data\r\n\t\t\t},\r\n\t\t\t'default_emit': [],\r\n\t\t},\r\n        /*\r\n\t\t\t数据上报\r\n        */\r\n        'REPORT_RULES': {\t\t\t\r\n            'default_emit': function(data, options) { \r\n\t            console.log(\"ATM report default_emit\",data)                 \r\n                return ;\r\n\t\t\t},\r\n            'default_auto': function(data, options) { \r\n\t            console.log(\"ATM report default_auto\",data)\r\n                 //Piwik延时执行\r\n                let piwikTT = setInterval(function () {\r\n                    if (!(typeof Piwik === 'undefined')) {\r\n                        try {\r\n                            let atmTracker = Piwik.getTracker();\r\n                            if (data.value) {\r\n                                atmTracker.trackEvent(data.page, data.trigger, data.element, data.value);\r\n                            }\r\n                            else {\r\n                                atmTracker.trackEvent(data.page, data.trigger, data.element);\r\n                            }\r\n                        }\r\n                        catch (error) {\r\n                            //do nothing\r\n                            console.log(\"piwik 尚未加载\");\r\n                        } finally {\r\n                            clearInterval(piwikTT);\r\n                        }\r\n                    }\r\n                }, 200);\r\n                return ;\r\n\t\t\t},\r\n        }, \r\n\t \r\n\t}\r\n\r\n\tconst ATM = {\r\n\t\tpresetRules: {\r\n\t\t\t'default_auto': {\r\n\t\t\t\tvalidateRule: ATM_CONFIG.VALIDATE_RULES.default_auto,\r\n\t\t\t\tprocessRule: ATM_CONFIG.PROCESS_RULES.default_auto,\r\n\t\t\t\treportRule: ATM_CONFIG.REPORT_RULES.default_auto,\r\n\t\t\t},\r\n\t\t\t'default_emit': {\r\n\t\t\t\tvalidateRule: ATM_CONFIG.VALIDATE_RULES.default_emit,\r\n\t\t\t\tprocessRule: ATM_CONFIG.PROCESS_RULES.default_emit,\r\n\t\t\t\treportRule: ATM_CONFIG.REPORT_RULES.default_emit,\r\n\t\t\t},\r\n\t\t\t'piwik_auto': {\r\n\t\t\t\tvalidateRule: ATM_CONFIG.VALIDATE_RULES.default_auto,\r\n\t\t\t\tprocessRule: ATM_CONFIG.PROCESS_RULES.default_auto,\r\n\t\t\t\treportRule: ATM_CONFIG.REPORT_RULES.default_auto,\r\n\t\t\t},\r\n\t\t\t'google_auto': {\r\n\t\t\t\tvalidateRule: ATM_CONFIG.VALIDATE_RULES.default_auto,\r\n\t\t\t\tprocessRule: ATM_CONFIG.PROCESS_RULES.default_auto,\r\n\t\t\t\treportRule: ATM_CONFIG.REPORT_RULES.google_auto, // google here\r\n\t\t\t}\r\n\t\t},\r\n\t\tatmTracker: {\r\n\t\t\t// 缓存已创建的 ATMTracker 实例\r\n\t\t\t// trackerName: new ATMTracker()\r\n\t\t}\r\n\t}\r\n \r\n\t// ATMTracker\r\n\tclass ATMTracker {\r\n\t\tconstructor(trackerName, data, options) {\r\n\t\t\t\r\n\t\t\tif(ATM.presetRules[trackerName]) {\r\n\t\t\t\t// 若有预设规则，则使用该规则\r\n\t\t\t\tthis.validateRule = ATM.presetRules[trackerName].validateRule\r\n\t\t\t\tthis.processRule = ATM.presetRules[trackerName].processRule\r\n\t\t\t\tthis.reportRule = ATM.presetRules[trackerName].reportRule\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// 若 ruleName 是 string 则匹配是否存在\r\n\r\n\r\n\t\t\t\t// 若 ruleName 是 function \r\n\r\n\t\t\t\t// 命名空间\r\n\t\t\t\t// 若预设中不存在，则匹配 options[trackerName + 'options'] 字段是否存在 （用于区分同时多个统计工具）\r\n\t\t\t\t// 若存在，则使用该对象的属性\r\n\t\t\t\tif(options[trackerName + 'options']) {\r\n\t\t\t\t\t// 分别判断 function or string \r\n\t\t\t\t\t(options[trackerName + 'options'].validateRule) && (this.validateRule = options.validateRule ) \r\n\t\t\t\t\t(options[trackerName + 'options'].processRule) && (this.processRule = options.processRule )\r\n\t\t\t\t\t(options[trackerName + 'options'].reportRule) && (this.reportRule = options.reportRule\t)\t \t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 若都不满足，则取 options.xxxRule\r\n\t\t\t\t\tthis.validateRule = options.validateRule\r\n\t\t\t\t\tthis.processRule = options.processRule\r\n\t\t\t\t\tthis.reportRule = options.reportRule\r\n\t\t\t\t}\t\t\r\n\r\n\r\n\t\t\t}\t\r\n\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t \r\n\t\tvalidateData(data,options) {\r\n\t\t\tconsole.log('ATM tracker : validateData')\r\n\t\t\t\r\n\t\t\tif(!this.validateRule) {\r\n\t\t\t\t// 指定规则，若未找到rule, 认定校验失败\t\t \r\n\t\t\t\tconsole.warn(\"ATM validateData: no matched validate rule, Please check your options.validateRule\")\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\r\n\t\t\tif(typeof this.validateRule === 'function') {\r\n\t\t\t\t// 规则为函数，直接用该函数进行判断\r\n\t\t\t\treturn this.validateRule(data,options)\r\n\r\n\t\t\t} else if (typeof this.validateRule === 'object') {\r\n\t\t\t\t// 规则为对象，使用约定方式进行判断\t\t\t\r\n\t\t\t\tthis.validateRule.requiredData = this.validateRule.requiredData || []\r\n\t\t\t\tthis.validateRule.requiredOptions = this.validateRule.requiredOptions || []\r\n\t\t\t\t// 任何一个未匹配成功即报错 \r\n\t\t\t\treturn !this.validateRule.requiredData.some(function(val) {\t\t \r\n\t\t\t\t\t!data[val] && console.warn(\"ATM validateData: Validate NOT passed, param: data.\" + val)\t\t\t\t\t\t\r\n\t\t\t\t\treturn !data[val] \r\n\t\t\t\t}) && !this.validateRule.requiredOptions.some(function(val) {\t\t\t\t\r\n\t\t\t\t\t!options[val] && console.warn(\"ATM validateData: Validate NOT passed, param: options.\" + val)\r\n\t\t\t\t\treturn !options[val] \r\n\t\t\t\t})  \r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconsole.warn(\"ATM validateData: Rule unmatched Please check your options.validateRule \")\r\n\t\t\treturn false\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tprocessData(data,options) {\r\n\t\t\tconsole.log('ATM tracker : processData')\r\n\r\n\t\t\tif(!this.processRule) {\r\n\t\t\t// 指定规则，若未找到rule, 认定处理失败\t\t \r\n\t\t\t\tconsole.warn(\"ATM validateData: no matched process rule, Please check your options.processRule\")\r\n\t\t\t\treturn false\r\n\t\t\t}\t\r\n\r\n\t\t\tif(typeof this.processRule === 'function') {\r\n\t\t\t\t// 规则为函数，直接用该函数进行数据处理\r\n\t\t\t\treturn this.processRule(data,options)\r\n\r\n\t\t\t} else if (Object.prototype.toString.call(this.processRule) === '[object Array]') {\r\n\t\t\t\t// 规则为数组，使用约定方式进行数据处理\t\t\t\t\t\t\t\t \t\r\n\t\t\t\t// mergeOptionName 优先级高于 mergeOptionValue\r\n\t\t\t\tthis.processRule.forEach(function(rule) {\t\t\t\t\r\n\t\t\t\t\tif(typeof rule.mergeOptionValue !== 'undefined') {\r\n\t\t\t\t\t\tdata[rule.mergeDataName] = options[rule.mergeOptionValue]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof rule.mergeOptionName !== 'undefined') {\r\n\t\t\t\t\t\tdata[rule.mergeDataName] = options[rule.mergeOptionName]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\treturn data \r\n\t\t\t}\t\r\n\r\n\t\t\tconsole.warn(\"ATM validateData : Rule unmatched Please check your options.processRule \")\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treportData(data,options) {\r\n\t\t\tconsole.log('ATM tracker : reportData')\r\n\r\n\t\t\tif(!this.reportRule) {\r\n\t\t\t\t// 指定规则，若未找到rule, 认定上报失败\t\t \t \r\n\t\t\t\tconsole.warn(\"ATM reportData: no matched report rule, Please check your options.reportRule\")\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\tif(typeof this.reportRule === 'function') {\r\n\t\t\t\t// 规则为函数，直接用该函数进行判断\r\n\t\t\t\treturn this.reportRule(data,options)\r\n\r\n\t\t\t}\r\n\t\t\tconsole.warn(\"ATM validateData: Rule unmatched Please check your options.reportRule\")\r\n\t\t\treturn false\r\n\t\t}\t\t\r\n\r\n\t\t// emit collecting track data 主动上报\r\n\t\temit(data,options) {\r\n\t\t\t// 验证\r\n\t    \tif(!this.validateData(data, options)) {\r\n\t        \treturn false\r\n\t        }\r\n\t        // 处理\r\n\t    \tlet _processedData = this.processData(data, options)\t      \r\n\t    \t// 上报\r\n\t        if(_processedData) {\r\n\t        \tthis.reportData(_processedData, options)  \r\n\t        }\r\n\t\t}\r\n\t} \r\n\r\n\r\n\t\r\n\r\n\t// RULES\r\n\r\n \r\n\t// METHODS \r\n\t// -----------------------------------------------\r\n\r\n\t// 数据校验\r\n\t// function validateData(rule, data, options) {\r\n\t\t\r\n\t// \tif(!ATM_CONFIG.VALIDATE_RULES[rule]) {\r\n\t// \t\t// 指定规则，若未找到rule, 认定校验失败\t\t \r\n\t// \t\tconsole.warn(\"ATM validateData: no matched validate rule, Please check your VALIDATE_RULES\")\r\n\t// \t\treturn false\r\n\t// \t}\r\n\r\n\t// \tif(typeof ATM_CONFIG.VALIDATE_RULES[rule] === 'function') {\r\n\t// \t\t// 规则为函数，直接用该函数进行判断\r\n\t// \t\treturn ATM_CONFIG.VALIDATE_RULES[rule](data,options)\r\n\r\n\t// \t} else if (typeof ATM_CONFIG.VALIDATE_RULES[rule] === 'object') {\r\n\t// \t\t// 规则为对象，使用约定方式进行判断\t\t\t\r\n\t// \t\tATM_CONFIG.VALIDATE_RULES[rule].requiredData = ATM_CONFIG.VALIDATE_RULES[rule].requiredData || []\r\n\t// \t\tATM_CONFIG.VALIDATE_RULES[rule].requiredOptions = ATM_CONFIG.VALIDATE_RULES[rule].requiredOptions || []\r\n\t// \t\t// 任何一个未匹配成功即报错 \r\n\t// \t\treturn !ATM_CONFIG.VALIDATE_RULES[rule].requiredData.some(function(val) {\t\t \r\n\t// \t\t\t!data[val] && console.warn(\"ATM validateData: Validate NOT passed, param: data.\" + val)\t\t\t\t\t\t\r\n\t// \t\t\treturn !data[val] \r\n\t// \t\t}) && !ATM_CONFIG.VALIDATE_RULES[rule].requiredOptions.some(function(val) {\t\t\t\t\r\n\t// \t\t\t!options[val] && console.warn(\"ATM validateData: Validate NOT passed, param: options.\" + val)\r\n\t// \t\t\treturn !options[val] \r\n\t// \t\t})  \r\n\t\t\t\r\n\t// \t}\r\n\r\n\r\n\t// \tconsole.warn(\"ATM validateData: Type unmatched Please check your ATM_CONFIG.VALIDATE_RULES \")\r\n\t// \treturn false\r\n\t// }\r\n\r\n\t// 数据预处理\r\n\t// function processData(rule = '', data = {} , options = {}) { \r\n\t// \tif(!ATM_CONFIG.PROCESS_RULES[rule]) {\r\n\t// \t\t// 指定规则，若未找到rule, 认定处理失败\t\t \r\n\t// \t\tconsole.warn(\"ATM validateData: no matched validate rule, Please check your PROCESS_RULES\")\r\n\t// \t\treturn false\r\n\t// \t}\t\r\n\r\n\t// \tif(typeof ATM_CONFIG.PROCESS_RULES[rule] === 'function') {\r\n\t// \t\t// 规则为函数，直接用该函数进行数据处理\r\n\t// \t\treturn ATM_CONFIG.PROCESS_RULES[rule](data,options)\r\n\r\n\t// \t} else if (Object.prototype.toString.call(ATM_CONFIG.PROCESS_RULES[rule]) === '[object Array]') {\r\n\t// \t\t// 规则为数组，使用约定方式进行数据处理\t\t\t\t\t\t\t\t \t\r\n\t// \t\t// mergeOptionName 优先级高于 mergeOptionValue\r\n\t// \t\tATM_CONFIG.PROCESS_RULES[rule].forEach(function(rule) {\t\t\t\t\r\n\t// \t\t\tif(typeof rule.mergeOptionValue !== 'undefined') {\r\n\t// \t\t\t\tdata[rule.mergeDataName] = options[rule.mergeOptionValue]\r\n\t// \t\t\t}\r\n\t// \t\t\tif(typeof rule.mergeOptionName !== 'undefined') {\r\n\t// \t\t\t\tdata[rule.mergeDataName] = options[rule.mergeOptionName]\r\n\t// \t\t\t}\r\n\t// \t\t})\r\n\t// \t\treturn data \r\n\t// \t}\t\r\n\t\t\r\n\t// }\r\n\r\n\t// 数据上报\r\n\t// function reportData(rule = '', data = {}, options = {}) {\t\t\t\t\r\n\t// \tif(!ATM_CONFIG.REPORT_RULES[rule]) {\r\n\t// \t\t// 指定规则，若未找到rule, 认定上报失败\t\t \t \r\n\t// \t\tconsole.warn(\"ATM validateData: no matched validate rule, Please check your REPORT_RULES\")\r\n\t// \t\treturn false\r\n\t// \t}\r\n\r\n\t// \treturn ATM_CONFIG.REPORT_RULES[rule](data,options)\t\t \r\n\t// }\r\n\r\n\t// API\r\n\t// -----------------------------------------------\r\n\r\n\t/*\r\n        被动方式 - 代理绑定埋点事件，收集埋点数据，并自动进行数据上报\r\n        @param: data // 需要自定义记录的数据\r\n        data: {\r\n            page: '', // 页面名称: home/index， 默认是 options.page\r\n            trigger: '', // 事件名or操作名 ，默认是 options.element + options.trigger\r\n            element: '', // 触发事件的元素名,默认是 options.element\r\n            value: Number, // 统计计数，默认是1\r\n        }\r\n\r\n        @param: options // required\r\n        options: {\r\n            trigger: 'eventName', // required, 触发事件名\r\n            action: '', // 一次性上报or分步骤上报\r\n            page: '', // required, 页面url,大小写不敏感，*表示全部页面\r\n            element: '#id .class tag', // required, 触发事件的元素   \r\n            eventType: 'capture', // 默认 capture 捕获 ，如果使用冒泡方式，则默认绑定在document上\r\n            validateRule: '', // 验证规则\r\n            processRule: '', // 处理规则\r\n            reportRule: '', // 上报规则\r\n\r\n        }\r\n    */\r\n\tATM.autoCollectTrackData = function (trigger, page, element, options = {}) {\r\n\t  \r\n\t  \t\r\n\t    // 数据校验，处理，上报都可空，默认使用 default_auto 进行检验\r\n\t    options.trackerName = options.trackerName || 'default_auto'\r\n\t    options.validateRule = options.validateRule || 'default_auto'\r\n\t    options.processRule = options.processRule || 'default_auto'\r\n\t    options.reportRule = options.reportRule || 'default_auto'\r\n\r\n\t    // 数据预处理\r\n\t    options.desc = options.desc || {}\r\n\t    options.desc = {\r\n\t    \ttrigger: options.desc.trigger || trigger,\r\n\t    \tpage: options.desc.page || page,\r\n\t    \telement: options.desc.element || element,\r\n\t    \tvalue: options.desc.value || 1\r\n\t    }\r\n\r\n\t    // 此处只验证埋点信息是否正确，不验证数据是否合法，也不对数据进行处理\r\n\r\n\r\n\t    if(!trigger || !page || !element) {\r\n\t    \tconsole.warn(\"ATM autoCollectTrackData: validateRule NOT passed\")\r\n\t    \treturn false\r\n\t    }\r\n \r\n\t   \t// page === .* 表示全部页面都监听\t    \r\n\t   \t// page 默认后期会由后台自动生成，前期需要自己手写正则\r\n\t    let pageRegexp = new RegExp(page,'i')\t    \r\n\t    let currenturl = window.location.href.toLowerCase();\r\n\t    try {\r\n\t        if (currenturl.match(pageRegexp)) {\r\n\t        \tif(typeof jQuery === 'undefined') {\r\n\t\t        \t// default : Event Capture 默认捕获方式\r\n\t\t        \tlet _nodeList = document.querySelectorAll(element)\r\n\r\n\t\t        \tif(_nodeList) {\r\n\t\t        \t\tlet _elements = Array.prototype.slice.call(_nodeList)\r\n\t\t        \t\t_elements.forEach(function(_element) {\r\n\t\t        \t\t\t_element.addEventListener(trigger,function() {\t\t\t        \t\t \t\r\n\t\t\t        \t\t \tconsole.log(this)\r\n\t\t\t        \t\t \tconsole.log('ATM.emitCollectingTrackData(data,options.desc), native, Event Capture')\r\n\t\t\t        \t\t \tATM.emitCollectingTrackData(options.trackerName, options.desc ,options)\r\n\t\t\t        \t\t })\r\n\t\t        \t\t})\r\n\t\t        \t\t \r\n\t\t        \t}\r\n\t\t        \t// 如果异步加载，则使用事件冒泡委托代理\r\n\t        \t} else {\r\n\t        \t\t// 如果存在jQuery，可以解决兼容性问题\r\n\t\t            $(element).on(trigger, function () {\r\n\t\t                console.log(this)\r\n\t        \t\t \tconsole.log('ATM.emitCollectingTrackData(data,options) ,jQuery ,Event Capture')\r\n\t        \t\t \tATM.emitCollectingTrackData(options.trackerName, options.desc ,options)\r\n\t\t            })\r\n\t        \t}\t        \t\t        \t\r\n\t        }                \r\n\t    }\r\n\t    catch (error) {\r\n\t         console.log(error)\r\n\t    }\r\n\t    \r\n\t}\r\n\r\n\t/*\r\n            主动 触发数据收集\r\n         \t@param: trackerName 统计工具名 \r\n\t\t\t\ttype: String/Array\r\n\t        @param: options {    \r\n                processType: function() {} // 数据处理方式\r\n            }\r\n            data 和 options 不能同时为空，单一可空\r\n            data 为空时，可能是通过 被动方式 autoCollectingTrackData\r\n            options 为空时， 一般是 直接调用主动方式 emitCollectingTrackData\r\n        */\r\n    ATM.emitCollectingTrackData = function (trackerName, data, options) {\r\n        if (!data && !options) {\r\n            return false;\r\n        }\r\n\r\n        \r\n        // options 为空时，认定为通过主动收集调用，填充默认 \r\n        options = options || {         \t \r\n        \ttrackerName: 'default_emit'\r\n        }\r\n\r\n        console.log('emitCollectingTrackData', data, options)          \r\n\r\n        // 上报数据\r\n        // 如果有多个 reportRule\r\n        // 约定使用reportRule作为processRule\r\n\t \r\n        if(typeof options.trackerName === 'string') {        \t\r\n\t        _applyATMTracker(options.trackerName, data, options)\t      \t         \r\n\t\t} else if (Object.prototype.toString.call(options.trackerName) === '[object Array]') {\r\n\t\t\toptions.trackerName.forEach(function(_trackerName) {\t\t\t\t\r\n\t\t        _applyATMTracker(_trackerName, data, options)\r\n\t\t\t})\r\n\t\t}                      \r\n    }\r\n\r\n    // 全局注册 ATMTracker\r\n    function _initATMTracker(trackerName, data, options) {   \r\n    \t// 调用 ATM Tracker 进行数据验证、处理、分析\r\n        // 同时在全局注册该 tracker 实例， 以避免重复new实例\t\r\n\t\tif(!ATM.atmTracker[trackerName]) {\r\n\t\t\tATM.atmTracker[trackerName] = new ATMTracker(trackerName, data, options)\r\n\t\t}   \r\n    }\r\n\r\n    function _applyATMTracker(trackerName, data, options) {    \r\n    \t// 全局注册 ATMTracker\t\r\n    \t_initATMTracker(trackerName, data, options) \r\n    \t// 调用公共方法 emit 进行上报 -> 内部包含 validate, process, report\r\n    \tATM.atmTracker[options.trackerName].emit(data,options)\r\n    }\r\n\r\n\r\n\t// TBD\r\n\tATM.setOptions = function(options) {\r\n\t\tconsole.log(\"setOptions:\")\r\n\t\tconsole.log(\"options: \" + options)\r\n\t\tconsole.log(\"ATM_CONFIG: \" + ATM_CONFIG)\t \r\n\t}\r\n\r\n\r\n\r\n\t// exports\r\n\t// -----------------------------------------------\r\n\r\n\t// 暴露全局 ATM\r\n\t// 如果已存在 ATM ， 为了避免覆盖原有业务中ATM，禁用该插件\r\n\t// this.ATM = ATM; babel 转换默认使用 use strict ， 立即执行函数中 this 指向 undefind\r\n\tif(window.ATM) {\r\n\t\tconsole.warn(\"ATM Fatal Error: window.ATM already exists, Please check\")\r\n\t}\r\n\twindow.ATM = window.ATM || ATM\r\n\r\n})();\r\n"]}