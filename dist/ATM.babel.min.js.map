{"version":3,"sources":["ATM.js"],"names":["validateData","rule","data","options","ATM_CONFIG","VALIDATE_RULES","_typeof","requiredData","requiredOptions","some","val","console","warn","ATM","piwik_emit","test","baidu_auto","google_auto","piwik_auto","default","PROCESS_RULES","mergeDataName","mergeOptionName","mergeOptionValue","REPORT_RULES","log","piwikTT","setInterval","Piwik","atmTracker","getTracker","value","trackEvent","category","action","name","error","clearInterval","autoCollectTrackData","trigger","page","element","validateRule","window","location","href","toLowerCase","currenturl","indexOf","_nodeList","document","querySelectorAll","Array","prototype","slice","call","map","_element","addEventListener","this","emitCollectingTrackData","processType","reportType","PROCESS_TYPE_MAPPING","REPORT_TYPE_MAPPING","setOptions"],"mappings":"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","file":"ATM.babel.min.js","sourcesContent":["//---------------------------------------------------------------------\r\n//\r\n// Auto Track Module\r\n// \r\n// v0.0.2\r\n// URL: [url=https://github.com/xunge0613/ATM/]https://github.com/xunge0613/ATM[/url]\r\n//\r\n// Licensed under the MIT license:\r\n//        [url=http://www.opensource.org/licenses/mit-license.php]http://www.opensource.org/licenses/mit-license.php[/url]\r\n//\r\n//---------------------------------------------------------------------\r\n;(function () {\r\n\tconst ATM = {}\r\n \r\n\t// CONFIG\r\n\t// -----------------------------------------------\r\n\tconst ATM_CONFIG = {\r\n\t\t/*\r\n            数据校验         \r\n        */\r\n\t\t'VALIDATE_RULES': {\r\n\t\t\t'piwik_emit': function(data,options) {\r\n\t\t\t\treturn true\r\n\t\t\t},\r\n\t\t\t'test': {\r\n\t\t\t\trequiredData: ['test'], \r\n            \trequiredOptions: []\r\n\t\t\t},\r\n\t\t\t'baidu_auto': {\r\n\t\t\t\trequiredData: [], \r\n            \trequiredOptions: ['trigger','page', 'element']\r\n\t\t\t},\r\n\t\t\t'google_auto': {\r\n\t\t\t\trequiredData: [], \r\n            \trequiredOptions: ['trigger','page', 'element']\r\n\t\t\t},\r\n            'piwik_auto': {\r\n            \trequiredData: [], \r\n            \trequiredOptions: ['trigger','page', 'element']\r\n            },\r\n            'default': {\r\n            \trequiredData: [], \r\n            \trequiredOptions: []\r\n            },\r\n        },\r\n        /*\r\n\t\t\t数据处理\r\n        */\r\n        'PROCESS_RULES': {\r\n\t\t\t'piwik_emit': function(data,options) {\r\n\t\t\t\treturn true\r\n\t\t\t},\r\n\t\t\t'piwik_auto': [\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'category',\r\n\t\t\t\t\tmergeOptionName: 'page'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'action',\r\n\t\t\t\t\tmergeOptionName: 'trigger'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'name',\r\n\t\t\t\t\tmergeOptionName: 'element'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tmergeDataName: 'value',\r\n\t\t\t\t\tmergeOptionValue: 1\r\n\t\t\t\t},\t\t\t\t\t\t\t\t\r\n\t\t\t]\r\n\t\t},\r\n        /*\r\n\t\t\t数据上报\r\n        */\r\n        'REPORT_RULES': {\t\t\t\r\n            'piwik_auto': function(data, options) { \r\n\t            console.log(\"report piwik\",data)\r\n                 //Piwik延时执行\r\n                let piwikTT = setInterval(function () {\r\n                    if (!(typeof Piwik === 'undefined')) {\r\n                        try {\r\n                            let atmTracker = Piwik.getTracker();\r\n                            if (data.value) {\r\n                                atmTracker.trackEvent(data.category, data.action, data.name, data.value);\r\n                            }\r\n                            else {\r\n                                atmTracker.trackEvent(data.category, data.action, data.name);\r\n                            }\r\n                        }\r\n                        catch (error) {\r\n                            //do nothing\r\n                            console.log(\"piwik 尚未加载\");\r\n                        } finally {\r\n                            clearInterval(piwikTT);\r\n                        }\r\n                    }\r\n                }, 200);\r\n                return ;\r\n\t\t\t},\r\n            'default': function(data, options) {\r\n\t            return \r\n            }, \r\n        }, \r\n\t \r\n\t}\r\n\r\n\t// RULES\r\n\r\n \r\n\t// METHODS \r\n\t// -----------------------------------------------\r\n\r\n\t// 数据校验\r\n\tfunction validateData(rule, data, options) {\r\n\t\tlet _validateStatus = true \r\n\r\n\t\tif(!ATM_CONFIG.VALIDATE_RULES[rule]) {\r\n\t\t\t// 未找到rule, 默认不校验\r\n\t\t\t// rule = 'default'\r\n\t\t\tconsole.warn(\"ATM validateData: no matched validate rule, default return true\")\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif(typeof ATM_CONFIG.VALIDATE_RULES[rule] === 'function') {\r\n\t\t\t// 规则为函数，直接用该函数进行判断\r\n\t\t\treturn ATM_CONFIG.VALIDATE_RULES[rule](data,options)\r\n\r\n\t\t} else if (typeof ATM_CONFIG.VALIDATE_RULES[rule] === 'object') {\r\n\t\t\t// 规则为对象，使用约定方式进行判断\t\t\t\r\n\t\t\tATM_CONFIG.VALIDATE_RULES[rule].requiredData = ATM_CONFIG.VALIDATE_RULES[rule].requiredData || []\r\n\t\t\tATM_CONFIG.VALIDATE_RULES[rule].requiredOptions = ATM_CONFIG.VALIDATE_RULES[rule].requiredOptions || []\r\n\t\t\t// 任何一个未匹配成功即报错 \r\n\t\t\treturn !ATM_CONFIG.VALIDATE_RULES[rule].requiredData.some(function(val) {\t\t \r\n\t\t\t\t!data[val] && console.warn(\"ATM validateData: Validate NOT passed, param: data.\" + val)\t\t\t\t\t\t\r\n\t\t\t\treturn !data[val] \r\n\t\t\t}) && !ATM_CONFIG.VALIDATE_RULES[rule].requiredOptions.some(function(val) {\t\t\t\t\r\n\t\t\t\t!options[val] && console.warn(\"ATM validateData: Validate NOT passed, param: options.\" + val)\r\n\t\t\t\treturn !options[val] \r\n\t\t\t})  \r\n\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\tconsole.warn(\"ATM validateData: Type unmatched Please check your ATM_CONFIG.VALIDATE_RULES \")\r\n\t\treturn true\r\n\t}\r\n\r\n\t// 数据处理\r\n\tfunction processData(rule, data, options) { \r\n\r\n\t}\r\n\r\n\t// 数据上报\r\n\tfunction reportData(rule, data, options) {\r\n\r\n\t}\r\n\r\n\t// API\r\n\t// -----------------------------------------------\r\n\r\n\t/*\r\n        被动方式 - 代理绑定埋点事件，收集埋点数据，并自动进行数据上报\r\n        @param: data // 需要自定义记录的数据\r\n        data: {\r\n            page: '', // 页面名称: home/index， 默认是 options.page\r\n            trigger: '', // 事件名or操作名 ，默认是 options.element + options.trigger\r\n            element: '', // 触发事件的元素名,默认是 options.element\r\n            value: Number, // 统计计数，默认是1\r\n        }\r\n\r\n        @param: options // required\r\n        options: {\r\n            trigger: 'eventName', // required, 触发事件名\r\n            action: '', // 一次性上报or分步骤上报\r\n            page: '', // required, 页面url,大小写不敏感，*表示全部页面\r\n            element: '#id .class tag', // required, 触发事件的元素   \r\n            eventType: 'capture', // 默认 capture 捕获 ，如果使用冒泡方式，则默认绑定在document上\r\n            validateRule: '', // 验证规则\r\n            processRule: '', // 处理规则\r\n            reportRule: '', // 上报规则\r\n\r\n        }\r\n    */\r\n\tATM.autoCollectTrackData = function (data, options) {\r\n\t    // 保证 data 是个对象\r\n\t    if (typeof data !== \"object\" || !data) {\r\n\t        data = {}\r\n\t    }\r\n\r\n\t    // 保证事件绑定有效\r\n\t    if (!options || !options.trigger || !options.page || !options.element) {\r\n\t    \tconsole.warn(\"ATM autoCollectTrackData: required options missed\")\r\n\t        return false\r\n\t    } \r\n\r\n\t    // 数据校验\r\n\t    if(options.validateRule && !validateData(options.validateRule, data, options)) {\r\n\t    \tconsole.warn(\"ATM autoCollectTrackData: validateRule NOT passed\")\r\n\t    \treturn false\r\n\t    }\r\n\r\n\t   \t\r\n\t    if (options.page === \"*\") {\r\n\t        options.page = window.location.href.toLowerCase();\r\n\t    }\r\n\r\n\t    var currenturl = window.location.href.toLowerCase();\r\n\t    try {\r\n\t        if (currenturl.indexOf(options.page) != -1) {\r\n\t        \t// default : Event Capture 默认捕获方式\r\n\t        \tlet _nodeList = document.querySelectorAll(options.element)\r\n\r\n\t        \tif(_nodeList) {\r\n\t        \t\tlet _elements = Array.prototype.slice.call(_nodeList)\r\n\t        \t\t_elements.map(function(_element) {\r\n\t        \t\t\t_element.addEventListener(options.trigger,function() {\r\n\t\t        \t\t \t// ATM.emitCollectingTrackData(data,options)\r\n\t\t        \t\t \tconsole.log(this)\r\n\t\t        \t\t \tconsole.log('ATM.emitCollectingTrackData(data,options)')\r\n\t\t        \t\t })\r\n\t        \t\t})\r\n\t        \t\t \r\n\t        \t}\r\n\t        \t// 事件冒泡\r\n\r\n\t        \t// 如果存在jQuery \r\n\r\n\t            //$(options.element).on(options.trigger, data, function () {\r\n\t            //    ahs.ATM.emitCollectingTrackData(data,options)\r\n\t            //})\r\n\t        }                \r\n\t    }\r\n\t    catch (error) {\r\n\t         console.log(error)\r\n\t    }\r\n\t    \r\n\t}\r\n\r\n\t/*\r\n            主动 触发数据收集\r\n            @param: data {\r\n                page: '', // 页面: home/index， 默认是 options.page\r\n                trigger: '', // 事件名or操作名 ，默认是 options.element + options.trigger\r\n                element: '', // 触发事件的元素名,默认是 options.element\r\n                value: Number, // 统计计数，默认是1\r\n            }\r\n            @param: options {    \r\n                processType: function() {} // 数据处理方式\r\n            }\r\n            data 和 options 不能同时为空，单一可空\r\n            data 为空时，可能是通过 被动方式 autoCollectingTrackData\r\n            options 为空时， 一般是 直接调用主动方式 emitCollectingTrackData\r\n        */\r\n    ATM.emitCollectingTrackData = function (data, options) {\r\n        if (!data && !options) {\r\n            return false;\r\n        }\r\n        options = options || { processType: 'default' }\r\n\r\n        // 默认使用Piwik处理数据\r\n        if (!options.processType) {\r\n            options.processType = 'default'\r\n        } \r\n\r\n        // 默认使用Piwik上报\r\n        if (!options.reportType) {\r\n            options.reportType = 'default'\r\n        }\r\n\r\n        console.log('emitCollectingTrackData', data, options)            \r\n       \r\n        // 处理数据          \r\n        data = ATM_CONFIG.PROCESS_TYPE_MAPPING[options.processType] && ATM_CONFIG.PROCESS_TYPE_MAPPING[options.processType](data, options)\r\n        \r\n        // 上报数据           \r\n        ATM_CONFIG.REPORT_TYPE_MAPPING[options.reportType] && ATM_CONFIG.REPORT_TYPE_MAPPING[options.reportType](data, options)\r\n        \r\n    }\r\n\r\n\r\n\t// TBD\r\n\tATM.setOptions = function(options) {\r\n\t\tconsole.log(\"setOptions:\")\r\n\t\tconsole.log(\"options: \" + options)\r\n\t\tconsole.log(\"ATM_CONFIG: \" + ATM_CONFIG)\t \r\n\t}\r\n\r\n\r\n\r\n\t// exports\r\n\t// -----------------------------------------------\r\n\r\n\t// 暴露全局 ATM\r\n\t// this.ATM = ATM; babel 转换默认使用 use strict ， 立即执行函数中 this 指向 undefind\r\n\twindow.ATM = ATM \r\n\r\n})();\r\n"]}